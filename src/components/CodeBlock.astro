---
interface Props {
  code: string;
  language: string;
  title?: string;
  showLineNumbers?: boolean;
}

const { code, language, title, showLineNumbers = true } = Astro.props;
---

<div class="code-block-container bg-tech-black rounded-lg overflow-hidden border border-gray-800 shadow-xl">
  {title && (
    <div class="code-block-header flex items-center justify-between px-4 py-2 bg-gray-900 border-b border-gray-800">
      <div class="flex items-center space-x-2">
        <div class="flex space-x-1">
          <div class="w-3 h-3 bg-red-500 rounded-full"></div>
          <div class="w-3 h-3 bg-yellow-500 rounded-full"></div>
          <div class="w-3 h-3 bg-green-500 rounded-full"></div>
        </div>
        <span class="text-gray-400 text-sm font-mono">{title}</span>
      </div>
      <span class="text-xs text-gray-500 uppercase">{language}</span>
    </div>
  )}

  <div class="relative">
    <pre class="p-4 overflow-x-auto text-sm font-mono leading-relaxed text-gray-300"><code class={`language-${language}`} set:html={code}></code></pre>

    <!-- Copy button -->
    <button
      class="copy-button absolute top-2 right-2 p-2 text-gray-400 hover:text-white transition-colors bg-gray-800 hover:bg-gray-700 rounded"
      data-code={code}
      title="Copy code"
    >
      <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z"></path>
      </svg>
    </button>
  </div>
</div>

<script>
  // Copy functionality
  document.addEventListener('DOMContentLoaded', function() {
    const copyButtons = document.querySelectorAll('.copy-button');

    copyButtons.forEach(button => {
      button.addEventListener('click', async function() {
        const code = this.getAttribute('data-code');
        if (code) {
          try {
            await navigator.clipboard.writeText(code);

            // Visual feedback
            const originalIcon = this.innerHTML;
            this.innerHTML = `
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
              </svg>
            `;

            setTimeout(() => {
              this.innerHTML = originalIcon;
            }, 2000);
          } catch (err) {
            console.error('Failed to copy: ', err);
          }
        }
      });
    });
  });
</script>